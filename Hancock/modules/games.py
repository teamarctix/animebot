import datetime
import random
import asyncio 
import pymongo
import requests as r 
import json

from Hancock import *
from Hancock.database import *
from pyrogram import *
from pyrogram.types import *
from telegraph import upload_file
from bs4 import BeautifulSoup as bs
from config import SUDO_USERS as s

photos = [
"https://telegra.ph/file/4e923543b7641fd46a429.jpg",
"https://telegra.ph/file/05cb8e48b29aeff809f22.jpg",
"https://telegra.ph/file/77d0f71ce0323a63e8b80.jpg",
"https://telegra.ph/file/0e100fe3757ac36495707.jpg",
"https://telegra.ph/file/3f3a0c5721b083712a443.jpg",
"https://telegra.ph/file/003b6081a3fc53bb32eb7.jpg",
"https://telegra.ph/file/4ea3049dc299a617d3a00.jpg",
"https://telegra.ph/file/66cb14b5821ffa80d1ffd.jpg",
"https://telegra.ph/file/aa6d76f7a901a8f06e5e4.jpg",
    
]



hek = [6109551937, 5917071362]
babe = [x*50 for x in range(1, 500)]
textbabe = """
**üõç …¥·¥á·¥° ·¥Ö·¥Ä…™ ü è s ú·¥è·¥ò! üõç**

**…¥·¥Ä·¥ç·¥á:** `{}` **(**`{}`**)**
**·¥ò Ä…™·¥Ñ·¥á:** `{}` **üé¥**

** è·¥è·¥ú Ä ·¥õ·¥è·¥ã·¥á…¥:** `{}` üé¥
"""

async def total_items_value(user_id: int):
    db = []
    x = await get_boughts(user_id)
    if not x:
        return 0
    y = x.split(",")
    for x in y:
        m = await get_shop(int(x))
        k = m["value"]
        db.append(int(k))
    return(int(sum(db)))

@Hancock.on_callback_query(filters.regex("backp"))
async def _backp(client, query):
  user_id = int(query.data.split(":")[1])
  if not query.from_user.id == user_id:
    return await query.answer(" è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥ò ü·¥Ä è·¥á Ä", show_alert=True)         
  else:
      await query.message.delete()
      b = await get_player_bank(query.from_user.id)
      x = await get_player_level(query.from_user.id)
      y = await get_player_xp(query.from_user.id)
      z = await get_player_profile(query.from_user.id)
      t = await get_player_total(query.from_user.id)
      p = (int(x)+1)*50
      d = await get_boughts(query.from_user.id)
      uwu = await total_items_value(query.from_user.id)
      if z == None and d:
          return await query.message.reply_photo(photo=random.choice(photos), caption=f"""
**üéÆ {query.from_user.mention}'s ·¥ò Ä·¥è“ì…™ ü·¥á:-**

**üí´  ü·¥á·¥†·¥á ü:** `{x}`
**‚öîÔ∏è ·¥ò Ä·¥è…¢ Ä·¥áss:** `{t}`/`{p}`
**üé¥ ·¥õ·¥è·¥ã·¥á…¥:** `{y}`
**üí≥  ô·¥Ä…¥·¥ã:** `{b}`
**üõçÔ∏è …™·¥õ·¥á·¥çs ·¥†·¥Ä ü·¥ú·¥á:** `{uwu}`
""", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"…™·¥õ·¥á·¥çs üõí",callback_data=f"items:{query.from_user.id}")]]))
      elif z == None and not d:
          return await query.message.reply_photo(photo=random.choice(photos), caption=f"""
**üéÆ {query.from_user.mention}'s ·¥ò Ä·¥è“ì…™ ü·¥á:-**

**üí´  ü·¥á·¥†·¥á ü:** `{x}`
**‚öîÔ∏è ·¥ò Ä·¥è…¢ Ä·¥áss:** `{t}`/`{p}`
**üé¥ ·¥õ·¥è·¥ã·¥á…¥:** `{y}`
**üí≥  ô·¥Ä…¥·¥ã:** `{b}`
**üõçÔ∏è …™·¥õ·¥á·¥çs ·¥†·¥Ä ü·¥ú·¥á:** `{uwu}`
""")
      elif z: 
          return await query.message.reply_photo(z, caption=f"""
**üéÆ {query.from_user.mention}'s ·¥ò Ä·¥è“ì…™ ü·¥á:-**

**üí´  ü·¥á·¥†·¥á ü:** `{x}`
**‚öîÔ∏è ·¥ò Ä·¥è…¢ Ä·¥áss:** `{t}`/`{p}`
**üé¥ ·¥õ·¥è·¥ã·¥á…¥:** `{y}`
**üí≥  ô·¥Ä…¥·¥ã:** `{b}`
**üõçÔ∏è …™·¥õ·¥á·¥çs ·¥†·¥Ä ü·¥ú·¥á:** `{uwu}`
""", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"…™·¥õ·¥á·¥çs üõí",callback_data=f"items:{query.from_user.id}")]]))


@Hancock.on_callback_query(filters.regex("items"))
async def _(client, query):
    user_id = int(query.data.split(":")[1])
    if not query.from_user.id == user_id:
        return await query.answer(" è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥ò ü·¥Ä è·¥á Ä", show_alert=True)         
    else:
        x = await get_boughts(user_id)
        y = x.split(",")
        num = 0
        textt = f"{query.from_user.mention}**'s …™·¥õ·¥á·¥çs**\n\n"
        textt += "".join(f"`{y.index(m) + 1}`. `{m}`\n" for m in y)
        textt += "\n**…¥·¥è·¥õ·¥á:-** `·¥õ ú·¥ás·¥á ·¥Ä Ä·¥á ·¥õ ú·¥á ·¥ú…¥…™«´·¥ú·¥á …™·¥Ö ·¥è“ì  è·¥è·¥ú Ä …™·¥õ·¥á·¥çs  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥ás·¥á …™·¥Ös ·¥õ·¥è s·¥Ä ü·¥á ·¥è Ä …¢…™·¥†·¥á  è·¥è·¥ú Ä …™·¥õ·¥á·¥çs ·¥õ·¥è ·¥Ä…¥ è ·¥è·¥õ ú·¥á Ä ·¥ò ü·¥Ä è·¥á Äs ·¥õ·¥è …¢·¥á·¥õ ·¥ã…¥·¥è·¥° ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á …™·¥Ö ·¥ús·¥á /data …™·¥Ö ( ô·¥á·¥õ·¥Ä ·¥õ·¥ás·¥õ…™…¥…¢).`"
        return await query.message.edit_media(media=InputMediaPhoto("https://graph.org/file/84d224c4a46e1b2e79a9b.jpg", caption=textt), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"Back ‚óÄÔ∏è",callback_data=f"backp:{user_id}")]]))

@Hancock.on_callback_query(filters.regex(r'stop'))
async def _(client, query):
    # This will return response None at listen
    await client.listen.Cancel(filters.user(query.from_user.id))
    
@Hancock.on_message(get_command("guess") & ~filters.private)
async def guess(client, message):
  #await message.reply_text("`·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.`")
  soup = bs(r.get('https://mywaifulist.moe/random').text, 'html.parser')
  mything = json.loads(soup.find('div', attrs={'id': 'app'}).get('data-page'))['props']['waifu']
  hehe = mything["name"]
  huh = hehe.replace("(", "")
  lmao = huh.replace(")", "")
  fuck = lmao.replace("Husbando", "")
  uwu = fuck.lower()
  m = await message.reply_photo(mything['display_picture'], caption='**…¢·¥ú·¥áss ·¥õ ú·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä “ì·¥è Ä** `250` **·¥Ñ·¥è…™…¥s**')
  us_in_db = await get_player(message.from_user.id)            
  if not us_in_db:
      return await message.reply_text("` è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥á·¥†·¥á…¥ …¥·¥è·¥õ ·¥ò ü·¥Ä è·¥á·¥Ö ·¥Ä s…™…¥…¢ ü·¥á ·¥°·¥Ä…¢·¥á Ä!`")
  else:
      return await add_message(uwu, m.id)

def startCheckQuery(message, StartQuery=None) -> bool:
    if (
        StartQuery in message.command[1].split('_')[0]
        and message.command[1].split('_')[0] == StartQuery
    ):
        return True
    else: 
        return False 

async def make_shop(message, pic: str, name: str, series: str, value: int, token: int, final: int):
       await message.reply_photo(pic, caption=textbabe.format(name, series, value, token), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f" ô·¥ú è {name} “ì·¥è Ä {value} üé¥",callback_data=f"buy:{message.from_user.id}:{final}")]]))

@Hancock.on_message(get_command("leaderboard"))
async def _leaderboard(_, message):
    point = db.players.find().sort("xp", pymongo.DESCENDING)
    points = await point.to_list(10)
    texto = "**üìà GLOBAL LEADERBOARD | üåç**\n\n"
    num = 0
    for x in points:
        num += 1
        try:
            users = await bot.get_users(x['player'])
            userss = users.first_name
        except Exception:
            userss = x["player"]  
        texto += f"`{num}`. **{userss}** [** ü·¥†:** `{x['level']}`] [**x·¥ò:** `{x['xp']}`]\n"
    await message.reply_photo(photo=random.choice(photos), caption=texto)

@Hancock.on_message(wager_command("wager") & ~filters.private)
async def _wager(_, message):
  us_in_db = await get_player(message.from_user.id)   
  if not us_in_db:
    await add_player(message.from_user.id, 500, 0, 0, 0)
    return await message.reply_photo(photo=random.choice(photos), caption="**·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á …¥·¥á·¥° ·¥ò ü·¥Ä è·¥á Ä**\n\n** è·¥è·¥ú …¢·¥è·¥õ** `500` üé¥ **·¥õ·¥è·¥ã·¥á…¥ “ì·¥è Ä s·¥õ·¥Ä Ä·¥õ-·¥ú·¥ò  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥ás·¥á ·¥õ·¥è·¥ã·¥á…¥s ·¥õ·¥è ·¥°·¥Ä…¢·¥á Ä.**")
  result = ["True", "False"]
  final = random.choice(result) 
  money = await get_player_xp(message.from_user.id)
  total = await get_player_total(message.from_user.id)
  if len(message.command) < 2:
      return await message.reply_text("`…¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥†·¥Ä ü·¥ú·¥á ·¥õ·¥è ·¥°·¥Ä…¢·¥á Ä.`")          
  else:
    wager = message.text.split()[1]
    if not str(wager).isdigit() or int(wager) > money or int(wager) == 0:
      return await message.reply_text("` è·¥è·¥ú Ä ·¥†·¥Ä ü·¥ú·¥á …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö.`")
    if final == "True":
      total = total + 1
      money = money + int(wager)
      await update_player_xp(message.from_user.id, money)
      await update_player_total(message.from_user.id, total)
      await message.reply_text(f"{message.from_user.mention} ** ú·¥Äs ·¥°·¥Ä…¢·¥á Ä** `{str(wager)}` **·¥õ·¥è·¥ã·¥á…¥s üé¥**\n\n**·¥°·¥á·¥°!  è·¥è·¥ú  ú·¥Ä·¥†·¥á …¢·¥Ä…™…¥** `{str(wager)}` **·¥õ·¥è·¥ã·¥á…¥s (‚úÖ)**")
    else:
      total = total + 1
      money = money - int(wager)
      await update_player_xp(message.from_user.id, money)
      await update_player_total(message.from_user.id, total)
      await message.reply_text(f"{message.from_user.mention} ** ú·¥Äs ·¥°·¥Ä…¢·¥á Ä** `{str(wager)}` **·¥õ·¥è·¥ã·¥á…¥s üé¥**\n\n**·¥è·¥è·¥òs!  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ö Ä·¥è·¥ò** `{str(wager)}` **·¥õ·¥è·¥ã·¥á…¥s (‚ùå)**")
    if total in babe:
        try:
            ok = int(total/50)
            money = money + int(ok*1000)
            await message.reply_photo(photo=random.choice(photos), caption=f"**‚öîÔ∏è ·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s** {message.from_user.mention} **“ì·¥è Ä  Ä·¥á·¥Ä·¥Ñ ú…™…¥…¢ ·¥õ ú·¥á  ü·¥á·¥†·¥á ü {ok}**\n\n** è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥è ô·¥õ·¥Ä…™…¥:** `{int(ok*1000)}` **·¥õ·¥è·¥ã·¥á…¥s üé¥**")
            await update_player_level(message.from_user.id, ok)
            await update_player_xp(message.from_user.id, money)
        except Exception as e:
            print(e)

@Hancock.on_message(get_command("present") & ~filters.private)
async def _present(_, message):
  if not message.reply_to_message or message.reply_to_message.from_user.id == message.from_user.id:
    return await message.reply_text("` Ä·¥á·¥ò ü è s·¥è·¥ç·¥á·¥è…¥·¥á ·¥õ·¥è ·¥ò Ä·¥ás·¥á…¥·¥õ.`")
  if not len(message.command) < 2:
    amount = message.text.split()[1]
  else:
    return await message.reply_text("`…¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥†·¥Ä ü·¥ú·¥á ·¥õ·¥è ·¥ò Ä·¥ás·¥á…¥·¥õ.`")
  reply = message.reply_to_message.from_user
  money = await get_player_xp(reply.id)
  gone = await get_player_xp(message.from_user.id)
  us_in_db = await get_player(reply.id)
  if not us_in_db:
    return await message.reply_text("` è·¥è·¥ú ·¥Ä Ä·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥° ú·¥è ·¥°·¥Äs …¥·¥è·¥õ ·¥°·¥Ä…¢·¥á Ä ·¥Ä s…™…¥…¢ ü·¥á ·¥õ…™·¥ç·¥á.`")
  else:
      if not str(amount).isdigit() or int(amount) > gone or int(amount) == 0:
        return await message.reply_text("` è·¥è·¥ú Ä ·¥ò Ä·¥ás·¥á…¥·¥õ ·¥Ä·¥ç·¥è·¥ú…¥·¥õ …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö`")
      else:
        present = money + int(amount)
        went = gone - int(amount)
        await update_player_xp(message.from_user.id, went)
        await update_player_xp(reply.id, present)
        return await message.reply_text("** è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò Ä·¥ás·¥á…¥·¥õ·¥á·¥Ö: **" + f"`{str(amount)}` üé¥ " + f"**·¥õ·¥è** {reply.mention}" + "\n\n" f"**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:** `{went}`")

@Hancock.on_message(get_command("setprofile"))
async def _setprofile(_, message):
  us_in_db = await get_player(message.from_user.id)             
  if not message.reply_to_message or not message.reply_to_message.media:
    return await message.reply_text("` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä·¥á·¥Ö…™·¥Ä s·¥á·¥õ ·¥Äs ·¥ò Ä·¥è“ì…™ ü·¥á.`")
  if not us_in_db:
    return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥ s·¥á·¥õ ·¥õ ú·¥á…™ Ä ·¥ò Ä·¥è“ì…™ ü·¥á`")
  else:
      k = await get_player_level(message.from_user.id)
      if k < 1:
          try:
              path = await message.reply_to_message.download()
              telegraph = upload_file(path)
              for file_id in telegraph:
                    ido = file_id
          except Exception as e:
                    print(e)
                    return await message.reply_text("**·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ s…™·¥¢·¥á ·¥è“ì ·¥õ ú·¥á “ì…™ ü·¥á ·¥ç·¥ús·¥õ  ô·¥á ·¥ú…¥·¥Ö·¥á Ä  ô ·¥õ·¥è s·¥á·¥õ ·¥Äs ·¥ò Ä·¥è“ì…™ ü·¥á.**")             
          await message.reply_photo(photo=random.choice(photos), caption=f"**·¥õ·¥è s·¥á·¥õ ·¥õ ú…™s ·¥Äs  è·¥è·¥ú Ä ·¥ò Ä·¥è“ì…™ ü·¥á  è·¥è·¥ú ·¥ç·¥ús·¥õ ·¥è…¥  ü·¥á·¥†·¥á ü 1  ô·¥ú·¥õ  è·¥è·¥ú Ä  ü·¥á·¥†·¥á ü …™s {k}**")
      else: 
          try:
              path = await message.reply_to_message.download()
              telegraph = upload_file(path)
              for file_id in telegraph:
                    ido = file_id
          except Exception as e:
                    print(e)
                    return await message.reply_text("**·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ s…™·¥¢·¥á ·¥è“ì ·¥õ ú·¥á “ì…™ ü·¥á ·¥ç·¥ús·¥õ  ô·¥á ·¥ú…¥·¥Ö·¥á Ä 5·¥ç ô ·¥õ·¥è s·¥á·¥õ ·¥Äs ·¥ò Ä·¥è“ì…™ ü·¥á.**")             
          await message.reply_photo(f"https://graph.org{ido}", caption="**·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è s·¥á·¥õ ·¥õ ú…™s ·¥Äs  è·¥è·¥ú Ä ·¥ò Ä·¥è“ì…™ ü·¥á.**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("s·¥á·¥õ ·¥ò Ä·¥è“ì…™ ü·¥á “ì·¥è Ä 100 üé¥",callback_data=f"set:{message.from_user.id}:{ido}")]]))

@Hancock.on_message(get_command("rob"))
async def _rob(_, message):
  current_date = datetime.datetime.now()
  final = current_date.year*10000000000 + current_date.month * 100000000 + current_date.day * 1000000
  us_in_db = await get_player(message.from_user.id)  
  if not message.reply_to_message:
    return await message.reply_text("` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ò ü·¥Ä è·¥á Ä.`")
  if message.reply_to_message.from_user.id == message.from_user.id:
    return await message.reply_text("`…¢·¥è…¥…¥·¥Ä  Ä·¥è ô  è·¥è·¥ú Äs·¥á ü“ì ?`")
  if not us_in_db:
    return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥  Ä·¥è ô.`")
  rus_in_db = await get_player(message.reply_to_message.from_user.id)             
  if not rus_in_db:
    return await message.reply_text("` è·¥è·¥ú  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥° ú·¥è  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥Ö·¥è…¥·¥Ä ·¥Ä s…™…¥…¢ ü·¥á ·¥°·¥Ä…¢·¥á Ä.`")
  else:
      k = await get_player_level(message.from_user.id)
      x = await get_player_level(message.reply_to_message.from_user.id)
      xp = await get_player_xp(message.from_user.id)
      rxp = await get_player_xp(message.reply_to_message.from_user.id)
      if k < 5:
          return await message.reply_text("`·¥õ·¥è ·¥Ä ·¥ò ü·¥Ä è·¥á Ä  è·¥è·¥ú ·¥ç·¥ús·¥õ ·¥è…¥  ü·¥á·¥†·¥á ü 5+`")
      if x < 1:
          return await message.reply_text("`·¥õ·¥è  Ä·¥è ô ·¥Ä ·¥ò ü·¥Ä è·¥á Ä ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ò ü·¥Ä è·¥á Ä ·¥ç·¥ús·¥õ ·¥è…¥  ü·¥á·¥†·¥á ü 1+`")
      if rxp < 500:
          return await message.reply_text("`·¥õ·¥ò  Ä·¥è ô ·¥Ä ·¥ò ü·¥Ä è·¥á Ä ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ò ü·¥Ä è·¥á Ä ·¥ç·¥ús·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥õ ü·¥á·¥Äs·¥õ 500+ ·¥õ·¥è·¥ã·¥á…¥s üé¥`")
      else:
          await add_robs(final, message.from_user.id)  
          bb = await get_robs(final, message.from_user.id)         
          result = ["True", "False"]
          final = random.choice(result) 
          lose = random.randint(500, rxp)
          if bb == 5:
              return await message.reply_text("` è·¥è·¥ú  ú·¥Ä·¥†·¥á  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥ç·¥Äx  Ä·¥è ôs ·¥õ·¥è·¥Ö·¥Ä è.`")
          if final == "True":
              sad = rxp - lose
              total = xp + lose
              gtfko = bb + 1
              remaining = 5 - bb
              await update_player_xp(message.from_user.id, total)
              await update_player_robs(final, message.from_user.id, gtfko)
              await update_player_xp(message.reply_to_message.from_user.id, sad)
              await message.reply_text(f"{message.from_user.mention} ** ú·¥Ä·¥†·¥á ·¥õ Ä…™·¥á·¥Ö ·¥õ·¥è  Ä·¥è ô** {message.reply_to_message.from_user.mention} **·¥Ä…¥·¥Ö ·¥õ·¥è·¥è·¥ã ·¥Ä·¥°·¥Ä è** `{lose}` **(‚úÖ)**\n\n** Ä·¥è ô ô·¥á Ä…™·¥ás  Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢:** `{remaining}`")
          if final == "False":
              await message.reply_text(f"{message.from_user.mention} ** ú·¥Ä·¥†·¥á ·¥õ Ä…™·¥á·¥Ö ·¥õ·¥è  Ä·¥è ô** {message.reply_to_message.from_user.mention} ** ô·¥ú·¥õ ·¥ò ü·¥è…™·¥Ñ·¥á  ú·¥Ä·¥†·¥á ·¥Ñ·¥Ä·¥ú…¢ ú·¥õ  ú…™·¥ç (üö®)**")
              await message.reply_text(f"**·¥ä·¥ús·¥õ ·¥ç…™ss** {message.from_user.mention} ** ú·¥Ä·¥†·¥á ·¥ás·¥Ñ·¥Ä·¥ò·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ò·¥è ü…™·¥Ñ·¥á  ô·¥ú·¥õ …¥·¥è ·¥ç·¥è Ä·¥á  Ä·¥è ô ô·¥á Ä…™·¥ás ·¥õ·¥è·¥Ö·¥Ä è (‚ùå)**")
              await update_player_robs(final, message.from_user.id, 5)
          
@Hancock.on_message(get_command("reset"))
async def _reset(_, message):
  us_in_db = await get_player(message.from_user.id)             
  if not us_in_db:
    return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥  Ä·¥ás·¥á·¥õ`")
  else:
    await message.reply_text("**·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥° ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è  Ä·¥ás·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(" Ä·¥ás·¥á·¥õ “ì·¥è Ä 1000 üé¥",callback_data=f"reset:{message.from_user.id}")]]))

@Hancock.on_callback_query(filters.regex("reset"))
async def reset(_, query):
     user_id = int(query.data.split(":")[1])
     xp = await get_player_xp(query.from_user.id)
     if not query.from_user.id == user_id:
         return await query.answer(" è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥õ ú·¥á ·¥ò ü·¥Ä è·¥á Ä ·¥° ú·¥è  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ·¥è  Ä·¥ás·¥á·¥õ", show_alert=True)         
     if xp < 1000:
         return await query.answer(" è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥õ·¥è·¥ã·¥á…¥ ·¥õ·¥è  Ä·¥ás·¥á·¥õ", show_alert=True)
     else:
        await db.players.delete_one({"player": user_id})
        await db.got.delete_one({"player": user_id})
        await db.shop.delete_one({"player": user_id})
        await query.message.edit_reply_markup(reply_markup=None)
        return await query.message.edit_caption(f"` è·¥è·¥ú' Ä·¥á ·¥Ä …¥·¥á·¥° ô…™·¥á …¥·¥è·¥°·¥è…¥·¥°·¥Ä Ä·¥Ös.`")

@Hancock.on_callback_query(filters.regex("set"))
async def setprofile(_, query):
     user_id = int(query.data.split(":")[1])
     url = query.data.split(":")[2]
     xp = await get_player_xp(query.from_user.id)
     if not query.from_user.id == user_id:
         return await query.answer(" è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥õ ú·¥á ·¥ò ü·¥Ä è·¥á Ä ·¥° ú·¥è  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ·¥è s·¥á·¥õ ·¥ò Ä·¥è“ì…™ ü·¥á", show_alert=True)         
     if xp < 1000:
         return await query.answer(" è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥õ·¥è·¥ã·¥á…¥ ·¥õ·¥è s·¥á·¥õ ·¥ò Ä·¥è“ì…™ ü·¥á.", show_alert=True)
     else:
        gone = xp - 1000
        lmao = "https://graph.org" + url
        await update_player_profile(query.from_user.id, lmao)
        await update_player_xp(query.from_user.id, gone)
        await query.message.edit_reply_markup(reply_markup=None)
        return await query.message.edit_caption(f"`·¥õ ú…™s …™·¥ç·¥Ä…¢·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ ·¥Äs  è·¥è·¥ú Ä ·¥ò Ä·¥è“ì…™ ü·¥á`\n\n**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:** `{gone}` üé¥")

uwu = """
‚Ä¢ **…¥·¥Ä·¥ç·¥á:** `{}`
‚Ä¢ **…™·¥Ö:** `{}`
‚Ä¢ **·¥ò·¥è·¥ã·¥á·¥Ö·¥áx:** `{}`
‚Ä¢ **s·¥á Ä…™·¥ás:** `{}`
‚Ä¢ **·¥Ä Ä·¥õ…™s·¥õ:** `{}`
‚Ä¢ ** Ä·¥á ü·¥á·¥Äs·¥á ·¥Ö·¥Ä·¥õ·¥Ä:** `{}`
‚Ä¢ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥Ä·¥õ:** `{}`
‚Ä¢ **·¥Ñ·¥Ä Ä·¥Ö …¥·¥è**: `{}`
"""

@Hancock.on_callback_query(filters.regex("nexti"))
async def next(_, query):
     user_id = int(query.data.split(":")[1])
     pokemon_name = query.data.split(":")[2]
     q = query.data.split(":")[3]
     card = requests.get(f"https://api.pokemontcg.io/v2/cards?q=name:{pokemon_name}", headers={'X-Api-Key':'a373cfc1-3b13-46c2-bc19-fc3b7e152fb8'}).json()["data"]
     buttons = [[
         InlineKeyboardButton("Back ‚èÆÔ∏è", callback_data=f"backi:{query.from_user.id}:{pokemon_name}:{q}"),
         InlineKeyboardButton("Next ‚è≠Ô∏è", callback_data=f"nexti:{query.from_user.id}:{pokemon_name}:{q}") 
 ]]
     if not query.from_user.id == user_id:
         return await query.answer(" è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥õ ú·¥á ·¥ús·¥á Ä ·¥° ú·¥è  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö", show_alert=True)         
     if cards:
        name = card[q+1]["name"]
        id = card[q+1]["id"]
        pokedex = card[q+1]["nationalPokedexNumbers"]
        series = card[q+1]["set"]["series"]
        artist = card[q+1]["artist"]
        rldate = card[q+1]["set"]["releaseDate"]
        updated = card[q+1]["set"]["updatedAt"]
        pic = card[q+1]["images"]["large"]
        if q+1 == len(card)-1:
            return await query.message.edit_media(
    media=InputMediaPhoto(pic, caption=uwu.format(name, id, pokedex, series, artist, rldate, updated)), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"Back ‚èÆÔ∏è",callback_data=f"backi:{query.from_user.id}:{l}")]]))
        else:
           return await query.message.edit_media(
    media=InputMediaPhoto(pic, caption=uwu.format(name, id, pokedex, series, artist, rldate, updated)), reply_markup=InlineKeyboardMarkup(buttons))

@Hancock.on_callback_query(filters.regex("backi"))
async def back(_, query):
     user_id = int(query.data.split(":")[1])
     q = query.data.split(":")[2]
     h = await get_boughts(user_id)
     x = h.split(",")
     l = int(q) - int(1)
     y = x[l]
     buttons = [[
         InlineKeyboardButton("Back ‚èÆÔ∏è", callback_data=f"backi:{query.from_user.id}:{l}"),
         InlineKeyboardButton("Next ‚è≠Ô∏è", callback_data=f"nexti:{query.from_user.id}:{l}") 
 ]]
     if not query.from_user.id == user_id:
         return await query.answer(" è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥õ ú·¥á ·¥ò ü·¥Ä è·¥á Ä", show_alert=True)         
     else:
        m = await get_shop(int(y))
        if y == x[0]:
            return await query.message.edit_media(
    media=InputMediaPhoto(m['pic'], caption=uwu.format(query.from_user.mention, l+1, m["name"], m["series"], m["date"], m["value"])), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"Next ‚è≠Ô∏è",callback_data=f"nexti:{query.from_user.id}:{l}")]]))
        else:
           return await query.message.edit_media(
    media=InputMediaPhoto(m['pic'], caption=uwu.format(query.from_user.mention, l+1, m["name"], m["series"], m["date"], m["value"])), reply_markup=InlineKeyboardMarkup(buttons))
 
@Hancock.on_message(get_command("profile"))
async def _profile(_, message):
  us_in_db = await get_player(message.from_user.id)             
  if not us_in_db:
    return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.`")
  else:
      b = await get_player_bank(message.from_user.id)
      x = await get_player_level(message.from_user.id)
      y = await get_player_xp(message.from_user.id)
      z = await get_player_profile(message.from_user.id)
      t = await get_player_total(message.from_user.id)
      p = (int(x)+1)*50
      d = await get_boughts(message.from_user.id)
      uwu = await total_items_value(message.from_user.id)
      if z == None and d:
          return await message.reply_photo(photo=random.choice(photos), caption=f"""
**üéÆ {message.from_user.mention}'s ·¥ò Ä·¥è“ì…™ ü·¥á:-**

**üí´  ü·¥á·¥†·¥á ü:** `{x}`
**‚öîÔ∏è ·¥ò Ä·¥è…¢ Ä·¥áss:** `{t}`/`{p}`
**üé¥ ·¥õ·¥è·¥ã·¥á…¥:** `{y}`
**üí≥  ô·¥Ä…¥·¥ã:** `{b}`
**üõçÔ∏è …™·¥õ·¥á·¥çs ·¥†·¥Ä ü·¥ú·¥á:** `{uwu}`
""", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"…™·¥õ·¥á·¥çs üõí",callback_data=f"items:{message.from_user.id}")]]))
      elif z == None and not d:
          return await message.reply_photo(photo=random.choice(photos), caption=f"""
**üéÆ {message.from_user.mention}'s ·¥ò Ä·¥è“ì…™ ü·¥á:-**

**üí´  ü·¥á·¥†·¥á ü:** `{x}`
**‚öîÔ∏è ·¥ò Ä·¥è…¢ Ä·¥áss:** `{t}`/`{p}`
**üé¥ ·¥õ·¥è·¥ã·¥á…¥:** `{y}`
**üí≥  ô·¥Ä…¥·¥ã:** `{b}`
**üõçÔ∏è …™·¥õ·¥á·¥çs ·¥†·¥Ä ü·¥ú·¥á:** `{uwu}`
""")
      elif z: 
          return await message.reply_photo(z, caption=f"""
**üéÆ {message.from_user.mention}'s ·¥ò Ä·¥è“ì…™ ü·¥á:-**

**üí´  ü·¥á·¥†·¥á ü:** `{x}`
**‚öîÔ∏è ·¥ò Ä·¥è…¢ Ä·¥áss:** `{t}`/`{p}`
**üé¥ ·¥õ·¥è·¥ã·¥á…¥:** `{y}`
**üí≥  ô·¥Ä…¥·¥ã:** `{b}`
**üõçÔ∏è …™·¥õ·¥á·¥ç ·¥†·¥Ä ü·¥ú·¥á:** `{uwu}`
""", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"…™·¥õ·¥á·¥çs üõí",callback_data=f"items:{message.from_user.id}")]]))

hmm = """
**{}'s …™·¥õ·¥á·¥çs!**

`1`**. …¥·¥Ä·¥ç·¥á:**  `{}`  **(** `{}` **)**
**·¥ú…¥…™«´·¥ú·¥á …™·¥Ö:** `{}`
**·¥†·¥Ä ü·¥ú·¥á:** `{}` üé¥
"""

bitch = """
`{}`**'s ·¥Ö·¥Ä·¥õ·¥Ä!**

**…¥·¥Ä·¥ç·¥á:**  `{}`  **(** `{}` **)**
**·¥†·¥Ä ü·¥ú·¥á:** `{}` üé¥
"""

@Hancock.on_message(get_command("data"))
async def data(_, message):
  us_in_db = await get_player(message.from_user.id)   
  if not us_in_db:
    return await message.reply_text("` è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥ò ü·¥Ä è·¥á Ä`")
  else:
      if len(message.command) < 2:
          return await message.reply_text("`…¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥†·¥Ä ü·¥ú·¥ás ·¥õ·¥è ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ ·¥Ö·¥Ä·¥õ·¥Ä.`")          
      else:
         wager = message.text.strip().split()[1]
         x = await get_boughts(message.from_user.id)
         y = x.split(",")
         if not str(wager).isdigit():
             return await message.reply_text("` è·¥è·¥ú Ä ·¥†·¥Ä ü·¥ú·¥á …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö.`")
         elif wager not in y:
             return await message.reply_text("` è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á ·¥Ö·¥Ä·¥õ·¥Ä ·¥è“ì …™·¥õ·¥á·¥çs ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á.`")
         else:
             k = await get_shop(int(wager))
             return await message.reply_photo(k["pic"], caption=bitch.format(wager, k["name"], k["series"], k["value"]))

@Hancock.on_message(get_command("items"))
async def _items(_, message):
  us_in_db = await get_boughts(message.from_user.id)             
  if not us_in_db:
    return await message.reply_text("` è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ  ô·¥è·¥ú…¢ ú·¥õ ·¥Ä…¥ è·¥õ ú…™…¥…¢.`")
  else:
      x = await get_boughts(message.from_user.id)
      y = x.split(",")
      if len(y) == 1:
          kk = x.replace(",", "")
          k = await get_shop(int(kk))
          return await message.reply_photo(k["pic"], caption=hmm.format(message.from_user.mention, k["name"], k["series"], k["date"], k["value"]))
      else:
          k = await get_shop(int(y[0]))
          oo = 0
          return await message.reply_photo(k["pic"], caption=hmm.format(message.from_user.mention, k["name"], k["series"], k["date"], k["value"]), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"Next ‚è≠Ô∏è",callback_data=f"nexti:{message.from_user.id}:{oo}")]]))

@Hancock.on_message(get_command("today") & filters.user(hek))
async def _today(_, message):
  current_date = datetime.datetime.now()
  final = current_date.year*10000000000 + current_date.month * 100000000 + current_date.day * 1000000
  name = message.text.split("-name")[1].split("-series")[0]
  series = message.text.split("-series")[1].split("-value")[0]
  value = message.text.split(None,1)[1].split()[-1]
  if not name or not series or not value or not message.reply_to_message.media:
    return await message.reply_text("`/today -pic ·¥ú Ä ü -name …¥·¥Ä·¥ç·¥á -series s·¥á Ä…™·¥ás -value ·¥†·¥Ä ü·¥ú·¥á.`")
  else:
      path = await message.reply_to_message.download()
      telegraph = upload_file(path)
      for file_id in telegraph:
          pic = "https://graph.org" + file_id
      await today_shop(final, pic, name, series, value)
      return await message.reply_text("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥è…¥·¥á.**")

@Hancock.on_message(get_command("boom") & filters.user(hek))
async def _boom(_, message):
  current_date = datetime.datetime.now()
  final = current_date.year*10000000000 + current_date.month * 100000000 + current_date.day * 1000000
  await db.shop.delete_one({"date": final})
  return await message.reply_text("` ô·¥è·¥è·¥ç...`")

@Hancock.on_message(get_command("shop"))
async def _shop(_, message):
  current_date = datetime.datetime.now()
  final = current_date.year*10000000000 + current_date.month * 100000000 + current_date.day * 1000000
  x = await get_today_shop(final)
  await add_giftp(message.from_user.id)
  b = await is_bought(message.from_user.id, f"{final}")
  money = await get_player_xp(message.from_user.id)
  us_in_db = await get_player(message.from_user.id)  
  if b == "True":
    return await message.reply_text("` è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á·¥Ö.`")
  else:
      if not us_in_db:
        return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥  ô·¥ú è.`")
      if not x:
        return await message.reply_text("` ü·¥è·¥è·¥ã's  ü…™·¥ã·¥á ·¥õ·¥è·¥Ö·¥Ä è …¥·¥è·¥õ ú…™…¥…¢ ·¥õ·¥è s·¥Ä ü·¥á.`")
      else:
        return await make_shop(message, x['pic'], x['name'], x['series'], x['value'], money, final)
 
@Hancock.on_callback_query(filters.regex("buy"))
async def buy(_, query):
     current_date = datetime.datetime.now()
     user_id = int(query.data.split(":")[1])
     fine = query.data.split(":")[2]
     xp = await get_player_xp(query.from_user.id)
     final = current_date.year*10000000000 + current_date.month * 100000000 + current_date.day * 1000000
     x = await get_today_shop(final)
     if not x["date"] == final:
        return await query.answer("s·¥è Ä Ä è ·¥õ ú…™s s·¥Ä ü·¥á …™s ·¥áx·¥ò…™ Ä·¥á·¥Ö", show_alert=True)         
     if xp < int(x['value']):
         return await query.answer(" è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥õ·¥è·¥ã·¥á…¥ ·¥õ·¥è  ô·¥ú è ·¥õ ú…™s", show_alert=True)
     if not query.from_user.id == user_id:
         return await query.answer(" è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥õ ú·¥á ·¥ò ü·¥Ä è·¥á Ä ·¥° ú·¥è  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ·¥è  ô·¥ú è", show_alert=True)         
     else:
         gone = int(xp) - int(x['value'])
         await update_player_xp(query.from_user.id, gone)
         await save_bought(user_id, x["date"])
         await query.message.edit_reply_markup(reply_markup=None)
         return await query.message.edit_caption(f"`{x['name']} …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á·¥Ö`\n\n**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:** `{gone}` üé¥")

@Hancock.on_message(get_command("deposit") & ~filters.private)
async def _deposit(_, message):
  money = await get_player_xp(message.from_user.id)
  bb = await get_player_bank(message.from_user.id)
  us_in_db = await get_player(message.from_user.id)             
  if not us_in_db:
    return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.`")
  if not len(message.command) < 2:
    amount = message.text.split()[1]
  else:
    return await message.reply_text("`…¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥†·¥Ä ü·¥ú·¥á ·¥õ·¥è ·¥Ö·¥á·¥ò·¥ès…™·¥õ·¥á.`")
  if not str(amount).isdigit() or int(amount) > money or int(amount) == 0:
    return await message.reply_text("` è·¥è·¥ú Ä ·¥Ö·¥á·¥ò·¥ès…™·¥õ ·¥Ä·¥ç·¥è·¥ú…¥·¥õ …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö.`")
  else:
      money = int(money) - int(amount)
      await update_player_xp(message.from_user.id, money)
      await message.reply_text(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö** `{amount}` **üí≥ …™…¥ ·¥õ ú·¥á  ô·¥Ä…¥·¥ã**\n\n**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:** `{money}` üé¥")
      amount = bb + int(amount)
      await update_player_bank(message.from_user.id, int(amount))

@Hancock.on_message(get_command("withdraw") & ~filters.private)
async def _withdraw(_, message):
  xp = await get_player_xp(message.from_user.id)
  money = await get_player_bank(message.from_user.id)
  us_in_db = await get_player(message.from_user.id)             
  if not us_in_db:
    return await message.reply_text("`·¥è…¥ ü è ·¥ò ü·¥Ä è·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö`")
  if not len(message.command) < 2:
    amount = message.text.split()[1]
  else:
    return await message.reply_text("`…¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥†·¥Ä ü·¥ú·¥á ·¥õ·¥è ·¥°…™·¥õ ú·¥Ö Ä·¥Ä·¥°.`")
  if not str(amount).isdigit() or int(amount) > money or int(amount) == 0:
    return await message.reply_text("` è·¥è·¥ú Ä ·¥°…™·¥õ ú·¥Ö Ä·¥Ä·¥° ·¥Ä·¥ç·¥è·¥ú…¥·¥õ …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö.`")
  else:
      xp = int(amount) + xp
      money = int(money) - int(amount)
      await update_player_bank(message.from_user.id, int(money))
      await update_player_xp(message.from_user.id, xp)
      return await message.reply_text(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥°…™·¥õ ú·¥Ö Ä·¥Ä·¥°** `{amount}` **üé¥ “ì Ä·¥è·¥ç ·¥õ ú·¥á  ô·¥Ä…¥·¥ã**\n\n** ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á …™…¥ ·¥õ ú·¥á  ô·¥Ä…¥·¥ã:** `{money}`  üí≥")

@Hancock.on_message(
    (filters.document
     | filters.text
     | filters.photo
     | filters.sticker
     | filters.animation
     | filters.video)
    & filters.chat(-1001328686560),
    group=1,
)
async def free(_, message):
    us_in_db = await get_player(message.from_user.id)
    if us_in_db:
        money = await get_player_xp(message.from_user.id)
        money = money + 1
        await update_player_xp(message.from_user.id, money)

@Hancock.on_message(filters.text & filters.reply, group=1)
async def chatwatchforguess(_, message):
  m = await db.memor.find_one({'mid': message.reply_to_message_id})
  if m:
    mtext = message.text.split()
    for x in mtext:
      if x not in ['/grs', '/pp', '/reverse', 'sauce']:
        if x in m['waifu']:
          await db.memor.delete_one(m)
          money = await get_player_xp(message.from_user.id)  
          money = money + 250
          await update_player_xp(message.from_user.id, money)
          await message.reply_text(f"**·¥ú·¥°·¥ú  è·¥è·¥ú …¢·¥è·¥õ** `250` üé¥  **“ì·¥è Ä …¢·¥ú·¥áss…™…¥…¢ ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è  è·¥è·¥ú' Ä·¥á ·¥õ ú·¥á ·¥ç·¥Ä…¥/·¥°·¥è·¥ç·¥Ä…¥ ·¥è“ì ·¥Ñ·¥ú ü·¥õ·¥ú Ä·¥á.**")
